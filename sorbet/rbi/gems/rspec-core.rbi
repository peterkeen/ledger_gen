# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rspec-core/all/rspec-core.rbi
#
# rspec-core-3.5.4

module RSpec::Support
  def self.require_rspec_core(f); end
end
module RSpec
  def self.clear_examples; end
  def self.configuration; end
  def self.configuration=(arg0); end
  def self.configure; end
  def self.const_missing(name); end
  def self.current_example; end
  def self.current_example=(example); end
  def self.reset; end
  def self.world; end
  def self.world=(arg0); end
  extend RSpec::Core::Warnings
end
module RSpec::Core
  def self.path_to_executable; end
end
class RSpec::Core::Time
  def self.now; end
end
class Module
  def context(*a, &b); end
  def describe(*a, &b); end
  def example_group(*a, &b); end
  def fcontext(*a, &b); end
  def fdescribe(*a, &b); end
  def shared_context(name, *args, &block); end
  def shared_examples(name, *args, &block); end
  def shared_examples_for(name, *args, &block); end
  def xcontext(*a, &b); end
  def xdescribe(*a, &b); end
end
module RSpec::Core::SharedContext
  def __shared_context_recordings; end
  def after(*args, &block); end
  def append_after(*args, &block); end
  def append_before(*args, &block); end
  def around(*args, &block); end
  def before(*args, &block); end
  def context(*args, &block); end
  def describe(*args, &block); end
  def hooks(*args, &block); end
  def included(group); end
  def let!(*args, &block); end
  def let(*args, &block); end
  def prepend_after(*args, &block); end
  def prepend_before(*args, &block); end
  def self.record(methods); end
  def subject!(*args, &block); end
  def subject(*args, &block); end
end
class RSpec::Core::SharedContext::Recording < Struct
  def args; end
  def args=(_); end
  def block; end
  def block=(_); end
  def method_name; end
  def method_name=(_); end
  def playback_onto(group); end
  def self.[](*arg0); end
  def self.members; end
  def self.new(*arg0); end
end
class RSpec::Core::ExampleStatusPersister
  def dump_statuses(unparsed_previous_runs); end
  def initialize(examples, file_name); end
  def persist; end
  def self.load_from(file_name); end
  def self.persist(examples, file_name); end
  def statuses_from_this_run; end
end
class RSpec::Core::ExampleStatusMerger
  def delete_previous_examples_that_no_longer_exist; end
  def example_must_no_longer_exist?(ex_id); end
  def hash_from(example_list); end
  def initialize(this_run, from_previous_runs); end
  def loaded_spec_files; end
  def merge; end
  def self.merge(this_run, from_previous_runs); end
  def sort_value_from(example); end
  def spec_file_from(ex_id); end
end
class RSpec::Core::ExampleStatusDumper
  def column_widths; end
  def dump; end
  def formatted_header_rows; end
  def formatted_row_from(row_values); end
  def formatted_value_rows; end
  def headers; end
  def initialize(examples); end
  def rows; end
  def self.dump(examples); end
end
class RSpec::Core::ExampleStatusParser
  def headers; end
  def initialize(string); end
  def parse; end
  def parse_row(line); end
  def self.parse(string); end
  def split_line(line); end
end
class RSpec::Core::Profiler
  def example_group_finished(notification); end
  def example_group_started(notification); end
  def example_groups; end
  def example_started(notification); end
  def initialize; end
end
